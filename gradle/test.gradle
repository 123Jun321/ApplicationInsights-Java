task remoteTest {
    ext.requriedProperties = ["machineName", "userName", "pass", "remoteDirectoryName", "localTestOutputFolderName"]

    doLast {
        logger.info("MachineName: $machineName")
        logger.info("User: $userName")
        logger.info("Test output folder: $localTestOutputFolderName")

        def localDirectory = rootProject.getProjectDir()
        def destinationDirectory = "/home/$userName/Desktop/$remoteDirectoryName"
        def archiveName = "binaries.jar"
        def archiveLocalLocation = "$localDirectory\\$archiveName"
        def archiveRemoteLocation = "$destinationDirectory/$archiveName"

        runLocalCommand("Delete local archive if it exists", "if exist \"$archiveLocalLocation\" del \"$archiveLocalLocation\"")
        runLocalCommand("Compress directory $localDirectory into $archiveLocalLocation", "jar cf \"$archiveName\" .")
        runRemoteCommand("Creating clean remote directory: $destinationDirectory", "rm -f -r $destinationDirectory && mkdir -p $destinationDirectory")
        runRemoteCopy(
            "Copying zipped binaries from $archiveLocalLocation to $archiveRemoteLocation on machine $machineName",
            archiveLocalLocation,
            "$userName@$machineName:$archiveRemoteLocation")
        runRemoteCommand("Extract zipped binaries from $archiveRemoteLocation on machine $machineName", "cd $destinationDirectory && jar xf $archiveRemoteLocation")
        runRemoteCommand("Allow execution of gradlew", "chmod +x $destinationDirectory/gradlew")
        runRemoteCommand("Changing gradlew linebreaks to unix style", "dos2unix $destinationDirectory/gradlew")

        try
        {
            runRemoteCommand("Executing tests remotely", "cd $destinationDirectory && ./gradlew cleanTest testAndCollect -x compileJava -x compileTestJava -PoutputFolderName=$localTestOutputFolderName")
        }
        finally
        {
            def testResultsArchiveName = "testResults.jar"
            def remoteTestResultsArchiveLocation = "$destinationDirectory/build/$testResultsArchiveName"

            runLocalCommand("Create local results directory: $rootProjectBuildDir", "if not exist \"$rootProjectBuildDir\" mkdir \"$rootProjectBuildDir\"")
            runRemoteCommand("Compress test results", "cd $destinationDirectory/build && jar cf $testResultsArchiveName $remoteTestResultsDirName $remoteTestReportDirName")
            runRemoteCopy("Copying test results back", "$userName@$machineName:$remoteTestResultsArchiveLocation","\"$rootProjectBuildDir\"")
            runLocalCommand("Unzip test results archive", "cd \"$rootProjectBuildDir\" && jar xf $testResultsArchiveName")
        }
    }
}

def runLocalCommand(description, command)
{
    logger.info("[runLocalCommand] $description")
    exec {
        executable "cmd"
        args "/c $command"
    }
}

def runRemoteCopy(description, from, into)
{
    logger.info("[runRemoteCopy] $description")
    exec {
        executable "pscp.exe"
        args "-r", "-pw", pass, from, into
    }
}

def runRemoteCommand(description, command)
{
    logger.info("[runRemoteCommand] $description")
    exec {
        executable "plink.exe"
        args "-pw", pass, "$userName@$machineName", command
    }
}
