/*
 * AppInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

project.ext.set("artifactsDirectoryRoot", new File(rootProject.getProjectDir(), 'build/artifacts'))
project.ext.set("globalTestResultsDirectoryRoot", new File(rootProject.getProjectDir(), 'global-test-results'))

// region Shared sub-projects configuration

subprojects {
    apply plugin: 'java'

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        options.bootClasspath = "${System.getenv('JAVA_JRE_6')}/lib/rt.jar"
    }

    if (this.hasProperty("testEnvName")) {
        testResultsDirName = testResultsDirName + "/" + testEnvName
        logger.info('Test results folder for project "' + project.name + '" set to "' + testResultsDir + '"')

        testReportDirName = testReportDirName + "/" + testEnvName
        logger.info('Test report folder for project "' + project.name + '" set to ' + testReportDirName + '"')
    }

    repositories {
        mavenCentral()
    }

    task copyLibsToGlobalArtifactsFolder(type: Copy) {
        into artifactsDirectoryRoot
    }
    
    task testAndCollect << {
        try
        {
            test{}.execute()
        }
        finally
        {
            def localTestResultsDirectory = new File(project.getProjectDir(), "build/test-results")
            def globalTestResultsDirectory = new File(globalTestResultsDirectoryRoot.getAbsolutePath(), outputFolderName)
            copy {
                from localTestResultsDirectory
                into globalTestResultsDirectory
            }
        }
    }
}

// endregion Shared sub-projects configuration

// region Public methods

ext {
    requiredPropertiesExist = this.&requiredPropertiesExist
}

gradle.taskGraph.whenReady { graph ->
    graph.getAllTasks().each { task ->
        if (task.hasProperty("requriedProperties")) {
            task.property("requriedProperties").each { prop ->
                verifyProjectPropertyExists(prop, task.name)
            }
        }
    }
}

def verifyProjectPropertyExists(propertyName, taskName)
{
    if (!this.hasProperty(propertyName)) {
        throw new GroovyRuntimeException("Property '$propertyName' must be defined for task '$taskName'")
    }
}

def requiredPropertiesExist(requiredPropertiesNames)
{
    return !(requiredPropertiesNames.any { prop ->
        println "checking $prop"
        return (!this.hasProperty(prop))
    })
    return true;
}
// endregion Public methods