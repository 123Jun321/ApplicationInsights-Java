/*
 * AppInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply from: "$buildScriptsDir/publishing.gradle"

def srcInternalPath = "com/microsoft/applicationinsights/internal"

ext {
    loggingFrameworkArtifactAlias = ""
    loggingFrameworkPath = ""
    loggingFrameworkName = ""
}

afterEvaluate {
    assert (!loggingFrameworkPath.isEmpty() && !loggingFrameworkName.isEmpty() && !loggingFrameworkArtifactAlias.isEmpty())
    archivesBaseName = "applicationinsights-logging-$loggingFrameworkArtifactAlias"
    sourceSets {
        main {
            java {
                include "$srcInternalPath/common/**"
                include "$srcInternalPath/$loggingFrameworkPath/**"
            }
        }
        test {
            java {
                include "$srcInternalPath/common/**"
                include "$srcInternalPath/shared/**"
                include "$srcInternalPath/$loggingFrameworkPath/**"
            }
        }
    }

    uploadArchives {
        if (requiredPropertiesExist(requriedProperties)) {
            repositories {
                mavenDeployer {
                    configuration = configurations.deployerJars

                    repository(url: mavenRepositoryUrl) {
                        authentication(userName: mavenUsername, password: mavenUserPassword)
                    }

                    updatePomWithGeneralProjectInformation(pom)

                    // Updating Core pom specific values.
                    pom.project {
                        name = "$project.msftAppInsights $loggingFrameworkName Appender"
                        description = "This module provides a $project.msftAppInsights appender implementation for $loggingFrameworkName framework"
                    }

                    pom.whenConfigured {
//                        p.dependencies = p.dependencies.findAll { dep -> dep.group == "compile" || dep.group == "runtime" }
                        p ->
                            p.dependencies = p.dependencies.findAll { dep -> dep.artifactId != "junit" && dep.artifactId != "mockito-all" }
                            writePomToArtifactsDirectory(p, project.name)
                    }
                }
            }
        }
    }
}

dependencies {
    compile project(':core')
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.0'
}


