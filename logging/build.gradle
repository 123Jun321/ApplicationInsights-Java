/*
 * AppInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

version = (version == "unspecified") ? "0.9.0-SNAPSHOT" : version
group = "com.microsoft.azure"
archivesBaseName = 'applicationinsights-logging'

// region Publishing tasks

uploadArchives {
    if (this.hasProperty("mavenUserPassword")) {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars

                repository(url: mavenRepositoryUrl) {
                    authentication(userName: mavenUsername, password: mavenUserPassword)
                }

                // Updating artifacts IDs and dependencies
                addFilter('LogbackJar') { artifact, file ->
                    artifact.name == "LogbackJar"
                }
                pom('LogbackJar') {
                    artifactId = 'applicationinsights-logging-logback'
                    whenConfigured { p ->
                        p.dependencies = p.dependencies.findAll { dep -> dep.artifactId == 'logback-classic' || dep.artifactId == 'logback-core' || dep.artifactId == 'applicationinsights-core' }.toList()
                        writePomToArtifactsDirectory(p, 'logback')
                    }

                    project {
                        name = project.msftAppInsights + " Logback Appender"
                        description = "This module provides a " + project.msftAppInsights + " appender implementation for Logback framework"
                    }
                }
                updatePomWithGeneralProjectInformation(pom('LogbackJar'))

                addFilter('Log4j1_2Jar') { artifact, file ->
                    artifact.name == "Log4j1_2Jar"
                }
                pom('Log4j1_2Jar') {
                    artifactId = 'applicationinsights-logging-log4j1_2'
                    whenConfigured { p ->
                        p.dependencies = p.dependencies.findAll { dep -> dep.groupId == 'log4j' || dep.artifactId == 'applicationinsights-core' }.toList()
                        writePomToArtifactsDirectory(p, 'log4j1_2')
                    }

                    project {
                        name = project.msftAppInsights + " Log4j 1.2 Appender"
                        description = "This module provides a " + project.msftAppInsights + " appender implementation for Log4j 1.2 framework"
                    }
                }
                updatePomWithGeneralProjectInformation(pom('Log4j1_2Jar'))

                addFilter('Log4j2Jar') { artifact, file ->
                    artifact.name == "Log4j2Jar"
                }
                pom('Log4j2Jar') {
                    artifactId = 'applicationinsights-logging-log4j2'
                    whenConfigured { p ->
                        p.dependencies = p.dependencies.findAll {
                            dep -> dep.artifactId == 'log4j-core' || dep.artifactId == 'log4j-api' || dep.artifactId == 'applicationinsights-core' }.toList()
                        writePomToArtifactsDirectory(p, 'log4j2')
                    }

                    project {
                        name = project.msftAppInsights + " Log4j 2 Appender"
                        description = "This module provides a " + project.msftAppInsights + " appender implementation for Log4j 2 framework"
                    }
                }
                updatePomWithGeneralProjectInformation(pom('Log4j2Jar'))
            }
        }
    }
}

// endregion Publishing tasks

dependencies {
    compile project(':core')
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.9'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.2'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
}

// region Create JAR tasks

task createLog4j1_2Jar(type: Jar) {
    from(sourceSets.main.output) {
        include "com/microsoft/applicationinsights/internal/log4j/v1_2/**", "com/microsoft/applicationinsights/internal/common/**"
        appendix = 'log4j1_2'
    }

    destinationDir = new File("$buildDir/libs/" + appendix)
}

task createLog4j2Jar(type: Jar) {
    from(sourceSets.main.output) {
        include "com/microsoft/applicationinsights/internal/log4j/v2/**", "com/microsoft/applicationinsights/internal/common/**"
        appendix = 'log4j2'
    }

    destinationDir = new File("$buildDir/libs/" + appendix)
}

task createLogbackJar(type: Jar) {
    from(sourceSets.main.output) {
        include "com/microsoft/applicationinsights/internal/logback/**", "com/microsoft/applicationinsights/internal/common/**"
        appendix = 'logback'
    }

    destinationDir = new File("$buildDir/libs/" + appendix)
}

task buildJars << {
    createLog4j1_2Jar.execute()
    createLog4j2Jar.execute()
    createLogbackJar.execute()
}

tasks.uploadArchives.dependsOn(buildJars)
tasks.buildJars.dependsOn createLog4j1_2Jar, createLog4j2Jar, createLogbackJar

// endregion Create JAR tasks

// region Create artifacts

artifacts {
    archives(createLog4j1_2Jar) {
        name = 'Log4j1_2Jar'
    }

    archives(createLog4j2Jar) {
        name = 'Log4j2Jar'
    }

    archives(createLogbackJar) {
        name = 'LogbackJar'
    }
}

// endregion Create artifacts

// Defining logging frameworks sources.

def logbackSources = sourceSets.main.allJava.matching { f ->
    f.include "com/microsoft/applicationinsights/internal/logback/**"
    f.include "com/microsoft/applicationinsights/internal/common/**"
}

def log4j2Sources = sourceSets.main.allJava.matching { f ->
    f.include "com/microsoft/applicationinsights/internal/log4j/v2/**"
    f.include "com/microsoft/applicationinsights/internal/common/**"
}

def log4j1_2Sources = sourceSets.main.allJava.matching { f ->
    f.include "com/microsoft/applicationinsights/internal/log4j/v1_2/**"
    f.include "com/microsoft/applicationinsights/internal/common/**"
}

// region Creating Javadoc jars

task createLogbackJavadoc(type: Javadoc) {
    source = logbackSources
    destinationDir = file("$buildDir/docs/logback")
    classpath = configurations.compile
}

task createLog4j2Javadoc(type: Javadoc) {
    source = log4j2Sources
    destinationDir = file("$buildDir/docs/log4j2")
    classpath = configurations.compile
}

task createLog4j1_2Javadoc(type: Javadoc) {
    source = log4j1_2Sources
    destinationDir = file("$buildDir/docs/log4j1_2")
    classpath = configurations.compile
}

task createLogbackJavadocJar(type: Jar) {
    doFirst {
        createLogbackJavadoc.execute()
    }

    from "$buildDir/docs/logback"
    appendix = 'logback'
    classifier = 'javadoc'
    destinationDir = new File("$buildDir/libs/" + appendix)
}

task createLog4j2JavadocJar(type: Jar) {
    doFirst {
        createLog4j2Javadoc.execute()
    }

    from "$buildDir/docs/log4j2"
    appendix = 'log4j2'
    classifier = 'javadoc'
    destinationDir = new File("$buildDir/libs/" + appendix)
}

task createLog4j1_2JavadocJar(type: Jar) {
    doFirst {
        createLog4j1_2Javadoc.execute()
    }

    from "$buildDir/docs/log4j1_2"
    appendix = 'log4j1_2'
    classifier = 'javadoc'
    destinationDir = new File("$buildDir/libs/" + appendix)
}

task generateLoggingJavadocs << {
    createLogbackJavadocJar.execute()
    createLog4j2JavadocJar.execute()
    createLog4j1_2JavadocJar.execute()
}

// endregion Creating Javadoc jars

// region Creating sources jars

task generateLogbackSourcesJar(type: Jar) {
    appendix = 'logback'
    classifier = 'sources'
    from logbackSources
    destinationDir = new File("$buildDir/libs/" + appendix)
}

task generateLog4j2SourcesJar(type: Jar) {
    appendix = 'log4j2'
    classifier = 'sources'
    from log4j2Sources
    destinationDir = new File("$buildDir/libs/" + appendix)
}

task generateLog4j1_2SourcesJar(type: Jar) {
    appendix = 'log4j1_2'
    classifier = 'sources'
    from log4j1_2Sources
    destinationDir = new File("$buildDir/libs/" + appendix)
}

task generateLoggingSources << {
    generateLogbackSourcesJar.execute()
    generateLog4j2SourcesJar.execute()
    generateLog4j1_2SourcesJar.execute()
}

assemble.doLast {
    generateLoggingJavadocs.execute()
    generateLoggingSources.execute()
    copyLibsToGlobalArtifactsFolder {
        from 'build/libs'
    }.execute()
}
// endregion Creating sources jars