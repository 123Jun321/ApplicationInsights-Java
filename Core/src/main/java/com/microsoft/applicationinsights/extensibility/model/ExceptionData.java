//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Java.tt
//     File     : com\microsoft\applicationinsights\extensibility\model\ExceptionData.java
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package com.microsoft.applicationinsights.extensibility.model;


/**
* ExceptionData
*/
@SuppressWarnings("all")
public class ExceptionData
{
    //
    // Fields
    //

    // 10: Required int32 ver
    private int ver;

    // 20: Required string handledAt
    private String handledAt;

    // 50: Required vector<com.microsoft.applicationinsights.extensibility.model.ExceptionDetails> exceptions
    private java.util.ArrayList<com.microsoft.applicationinsights.extensibility.model.ExceptionDetails> exceptions;

    // 80: Optional string method
    private String method;

    // 90: Optional string exceptionType
    private String exceptionType;

    // 100: Optional string assembly
    private String assembly;

    // 110: Optional int32 count
    private int count;

    // 120: Optional string problemId
    private String problemId;

    // 125: Optional com.microsoft.applicationinsights.extensibility.model.SeverityLevel severityLevel
    private com.microsoft.applicationinsights.extensibility.model.SeverityLevel severityLevel;

    // 130: Optional map<string, string> properties
    private java.util.HashMap<String, String> properties;

    // 200: Optional map<string, double> measurements
    private java.util.HashMap<String, Double> measurements;

    /**
     * @return current value of ver property
     */
    public final int getVer() {
        return this.ver;
    }

    /**
     * @param value new value of ver property
     */
    public final void setVer(int value) {
        this.ver = value;
    }

    /**
     * @return current value of handledAt property
     */
    public final String getHandledAt() {
        return this.handledAt;
    }

    /**
     * @param value new value of handledAt property
     */
    public final void setHandledAt(String value) {
        this.handledAt = value;
    }

    /**
     * @return current value of exceptions property
     */
    public final java.util.ArrayList<com.microsoft.applicationinsights.extensibility.model.ExceptionDetails> getExceptions() {
        return this.exceptions;
    }

    /**
     * @param value new value of exceptions property
     */
    public final void setExceptions(java.util.ArrayList<com.microsoft.applicationinsights.extensibility.model.ExceptionDetails> value) {
        this.exceptions = value;
    }

    /**
     * @return current value of method property
     */
    public final String getMethod() {
        return this.method;
    }

    /**
     * @param value new value of method property
     */
    public final void setMethod(String value) {
        this.method = value;
    }

    /**
     * @return current value of exceptionType property
     */
    public final String getExceptionType() {
        return this.exceptionType;
    }

    /**
     * @param value new value of exceptionType property
     */
    public final void setExceptionType(String value) {
        this.exceptionType = value;
    }

    /**
     * @return current value of assembly property
     */
    public final String getAssembly() {
        return this.assembly;
    }

    /**
     * @param value new value of assembly property
     */
    public final void setAssembly(String value) {
        this.assembly = value;
    }

    /**
     * @return current value of count property
     */
    public final int getCount() {
        return this.count;
    }

    /**
     * @param value new value of count property
     */
    public final void setCount(int value) {
        this.count = value;
    }

    /**
     * @return current value of problemId property
     */
    public final String getProblemId() {
        return this.problemId;
    }

    /**
     * @param value new value of problemId property
     */
    public final void setProblemId(String value) {
        this.problemId = value;
    }

    /**
     * @return current value of severityLevel property
     */
    public final com.microsoft.applicationinsights.extensibility.model.SeverityLevel getSeverityLevel() {
        return this.severityLevel;
    }

    /**
     * @param value new value of severityLevel property
     */
    public final void setSeverityLevel(com.microsoft.applicationinsights.extensibility.model.SeverityLevel value) {
        this.severityLevel = value;
    }

    /**
     * @return current value of properties property
     */
    public final java.util.HashMap<String, String> getProperties() {
        return this.properties;
    }

    /**
     * @param value new value of properties property
     */
    public final void setProperties(java.util.HashMap<String, String> value) {
        this.properties = value;
    }

    /**
     * @return current value of measurements property
     */
    public final java.util.HashMap<String, Double> getMeasurements() {
        return this.measurements;
    }

    /**
     * @param value new value of measurements property
     */
    public final void setMeasurements(java.util.HashMap<String, Double> value) {
        this.measurements = value;
    }

    // Constructor
    public ExceptionData() {
        reset();
    }

    /*
     * @see com.microsoft.bond.BondSerializable#reset()
     */
    public void reset() {
        reset("ExceptionData", "com.microsoft.applicationinsights.extensibility.model.ExceptionData");
    }

    protected void reset(String name, String qualifiedName) {
        
        ver = 1;
        handledAt = "";
        if (exceptions == null) {
            exceptions = new java.util.ArrayList<com.microsoft.applicationinsights.extensibility.model.ExceptionDetails>();
        } else {
            exceptions.clear();
        }
        method = "";
        exceptionType = "";
        assembly = "";
        count = 0;
        problemId = "";
        if (properties == null) {
            properties = new java.util.HashMap<String, String>();
        } else {
            properties.clear();
        }
        if (measurements == null) {
            measurements = new java.util.HashMap<String, Double>();
        } else {
            measurements.clear();
        }
    }
} // class ExceptionData
